/**
 * This class is generated by jOOQ
 */
package models.talentDB.tables;


import models.talentDB.Keys;
import models.talentDB.Talent;
import models.talentDB.tables.records.NotificationRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.8.0"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Notification extends TableImpl<NotificationRecord> {

    /**
     * The reference instance of <code>talent.Notification</code>
     */
    public static final Notification NOTIFICATION = new Notification();
    private static final long serialVersionUID = 855086467;
    /**
     * The column <code>talent.Notification.Notification_ID</code>.
     */
    public final TableField<NotificationRecord, Integer> NOTIFICATION_ID = createField("Notification_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>talent.Notification.User_ID</code>.
     */
    public final TableField<NotificationRecord, Integer> USER_ID = createField("User_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>talent.Notification.Date</code>.
     */
    public final TableField<NotificationRecord, Timestamp> DATE = createField("Date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");
    /**
     * The column <code>talent.Notification.Type</code>.
     */
    public final TableField<NotificationRecord, String> TYPE = createField("Type", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>talent.Notification</code> table reference
     */
    public Notification() {
        this("Notification", null);
    }

    /**
     * Create an aliased <code>talent.Notification</code> table reference
     */
    public Notification(String alias) {
        this(alias, NOTIFICATION);
    }

    private Notification(String alias, Table<NotificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Notification(String alias, Table<NotificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationRecord> getRecordType() {
        return NotificationRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Talent.TALENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<NotificationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_NOTIFICATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NotificationRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFICATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NotificationRecord>> getKeys() {
        return Arrays.<UniqueKey<NotificationRecord>>asList(Keys.KEY_NOTIFICATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Notification as(String alias) {
        return new Notification(alias, this);
    }

    /**
     * Rename this table
     */
    public Notification rename(String name) {
        return new Notification(name, null);
    }
}
