/**
 * This class is generated by jOOQ
 */
package models.talentDB.tables.pojos;


import models.RESTHelper;
import play.data.validation.ValidationError;

import javax.annotation.Generated;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.8.0"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Entity
@Table(name = "User", schema = "talent")
public class User implements Serializable {

    private static final long serialVersionUID = -1945762926;

    private Integer userId;
    private String nickname;
    private String username;
    private String password;
    private String email;
    private Date dateOfBirth;
    private String bio;
    private String profilePicture;
    private String facebook;
    private String youtube;
    private String profileLink;
    private Double lat;
    private Double lang;

    public User() {
    }

    public User(User value) {
        this.userId = value.userId;
        this.nickname = value.nickname;
        this.username = value.username;
        this.password = value.password;
        this.email = value.email;
        this.dateOfBirth = value.dateOfBirth;
        this.bio = value.bio;
        this.profilePicture = value.profilePicture;
        this.facebook = value.facebook;
        this.youtube = value.youtube;
        this.profileLink = value.profileLink;
        this.lat = value.lat;
        this.lang = value.lang;
    }

    public User(
            Integer userId,
            String nickname,
            String username,
            String password,
            String email,
            Date dateOfBirth,
            String bio,
            String profilePicture,
            String facebook,
            String youtube,
            String profileLink,
            Double lat,
            Double lang
    ) {
        this.userId = userId;
        this.nickname = nickname;
        this.username = username;
        this.password = password;
        this.email = email;
        this.dateOfBirth = dateOfBirth;
        this.bio = bio;
        this.profilePicture = profilePicture;
        this.facebook = facebook;
        this.youtube = youtube;
        this.profileLink = profileLink;
        this.lat = lat;
        this.lang = lang;
    }

    public List<ValidationError> validate() throws SQLException {
        List<ValidationError> errors = new ArrayList<ValidationError>();
        RESTHelper restHelper = new RESTHelper();

        if (username == null) {
            errors.add(new ValidationError("username", "username is requered"));
        } else if (!username.matches("[A-Za-z0-9_]+")) {
            errors.add(new ValidationError("username", "username should be valid"));

        } else if (restHelper.getWhere("user", "Username", username).size() > 0) {
            errors.add(new ValidationError("username", "this username is used before"));


        }

//        errors.add(new ValidationError("password", "password is requered"));
//    } else if (!password.matches("^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[^a-zA-Z0-9\\\\s]).{6,}")) {
//        errors.add(new ValidationError("password", "password should be valid ex  At least one character in [a-zA-Z] , At least one digit.,At least one character that's not in [a-zA-Z0-9\\s] ,  At least 6 characters."));

        if (password == null) {
            errors.add(new ValidationError("password", "password is requered"));
        } else if (password.length() < 8) {
            errors.add(new ValidationError("password", "password should be At least 8 characters."));
        }


        if (nickname == null) {
            errors.add(new ValidationError("name", "name is requered"));
        }

        if (email == null) {
            errors.add(new ValidationError("email", "email is requered"));
        } else if (!email.matches("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?")) {
            errors.add(new ValidationError("email", "email should be valid"));

        } else if (restHelper.getWhere("user", "Email", email).size() > 0) {
            errors.add(new ValidationError("email", "the email is used before"));

        }

        return errors.isEmpty() ? null : errors;
    }


    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "User_ID", unique = true, nullable = false, precision = 10)
    public Integer getUserId() {
        return this.userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    @Column(name = "Nickname", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    public String getNickname() {
        return this.nickname;
    }

    public void setNickname(String nickname) {
        this.nickname = nickname;
    }

    @Column(name = "Username", unique = true, nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Column(name = "Password", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "Email", unique = true, nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "Date_Of_Birth")
    public Date getDateOfBirth() {
        return this.dateOfBirth;
    }

    public void setDateOfBirth(Date dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    @Column(name = "Bio", length = 255)
    @Size(max = 255)
    public String getBio() {
        return this.bio;
    }

    public void setBio(String bio) {
        this.bio = bio;
    }

    @Column(name = "Profile_Picture", length = 500)
    @Size(max = 500)
    public String getProfilePicture() {
        return this.profilePicture;
    }

    public void setProfilePicture(String profilePicture) {
        this.profilePicture = profilePicture;
    }

    @Column(name = "Facebook", length = 255)
    @Size(max = 255)
    public String getFacebook() {
        return this.facebook;
    }

    public void setFacebook(String facebook) {
        this.facebook = facebook;
    }

    @Column(name = "Youtube", length = 255)
    @Size(max = 255)
    public String getYoutube() {
        return this.youtube;
    }

    public void setYoutube(String youtube) {
        this.youtube = youtube;
    }

    @Column(name = "Profile_Link", unique = true, length = 255)
    @Size(max = 255)
    public String getProfileLink() {
        return this.profileLink;
    }

    public void setProfileLink(String profileLink) {
        this.profileLink = profileLink;
    }

    @Column(name = "lat", precision = 22)
    public Double getLat() {
        return this.lat;
    }

    public void setLat(Double lat) {
        this.lat = lat;
    }

    @Column(name = "lang", precision = 22)
    public Double getLang() {
        return this.lang;
    }

    public void setLang(Double lang) {
        this.lang = lang;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("User (");

        sb.append(userId);
        sb.append(", ").append(nickname);
        sb.append(", ").append(username);
        sb.append(", ").append(password);
        sb.append(", ").append(email);
        sb.append(", ").append(dateOfBirth);
        sb.append(", ").append(bio);
        sb.append(", ").append(profilePicture);
        sb.append(", ").append(facebook);
        sb.append(", ").append(youtube);
        sb.append(", ").append(profileLink);
        sb.append(", ").append(lat);
        sb.append(", ").append(lang);

        sb.append(")");
        return sb.toString();
    }
}
