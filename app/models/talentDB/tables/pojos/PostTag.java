/**
 * This class is generated by jOOQ
 */
package models.talentDB.tables.pojos;


import models.RESTHelper;
import play.data.validation.ValidationError;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import java.io.Serializable;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.8.0"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Entity
@Table(name = "Post Tag", schema = "talent", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"Tag_ID", "Post_ID"})
})
public class PostTag implements Serializable {

    private static final long serialVersionUID = -1627912611;

    private Integer tagId;
    private Integer postId;

    public PostTag() {
    }

    public PostTag(PostTag value) {
        this.tagId = value.tagId;
        this.postId = value.postId;
    }

    public PostTag(
            Integer tagId,
            Integer postId
    ) {
        this.tagId = tagId;
        this.postId = postId;
    }

    public List<ValidationError> validate() throws SQLException {
        List<ValidationError> errors = new ArrayList<ValidationError>();
        RESTHelper restHelper = new RESTHelper();

        if (postId == null) {
            errors.add(new ValidationError("postId", "postId is requered"));
        }
        if (tagId == null) {
            errors.add(new ValidationError("tagId", "tagId is requered"));
        } else if (!(restHelper.getWhere("post", "Post_ID", String.valueOf(postId)).size() > 0)) {
            errors.add(new ValidationError("postId", "this postId not found"));
        } else if (!(restHelper.getWhere("tag", "Tag_ID", String.valueOf(tagId)).size() > 0)) {
            errors.add(new ValidationError("tagId", "this tagId not found"));
        } else {
            Map<String, String> map = new HashMap<>();
            map.put("Post_ID", String.valueOf(postId));
            map.put("Tag_ID", String.valueOf(tagId));
            List<Like> like = restHelper.getWhereCondition("post_tag", new String[]{"AND"}, map);
            if (like.size() > 0) {
                errors.add(new ValidationError("tagId", "tag used before"));
            }
        }


        return errors.isEmpty() ? null : errors;
    }

    @Column(name = "Tag_ID", nullable = false, precision = 10)
    public Integer getTagId() {
        return this.tagId;
    }

    public void setTagId(Integer tagId) {
        this.tagId = tagId;
    }

    @Column(name = "Post_ID", nullable = false, precision = 10)
    @NotNull
    public Integer getPostId() {
        return this.postId;
    }

    public void setPostId(Integer postId) {
        this.postId = postId;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PostTag (");

        sb.append(tagId);
        sb.append(", ").append(postId);

        sb.append(")");
        return sb.toString();
    }
}
