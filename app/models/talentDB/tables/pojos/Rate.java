/**
 * This class is generated by jOOQ
 */
package models.talentDB.tables.pojos;


import models.RESTHelper;
import play.data.validation.ValidationError;

import javax.annotation.Generated;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.io.Serializable;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.8.0"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Entity
@Table(name = "Rate", schema = "talent")
public class Rate implements Serializable {

    private static final long serialVersionUID = -434464221;

    private Integer rateId;
    private Integer postId;
    private Double rating;
    private Integer userId;
    private Timestamp date;

    public Rate() {
    }

    public Rate(Rate value) {
        this.rateId = value.rateId;
        this.postId = value.postId;
        this.rating = value.rating;
        this.userId = value.userId;
        this.date = value.date;
    }

    public Rate(
            Integer rateId,
            Integer postId,
            Double rating,
            Integer userId,
            Timestamp date
    ) {
        this.rateId = rateId;
        this.postId = postId;
        this.rating = rating;
        this.userId = userId;
        this.date = date;
    }

    public List<ValidationError> validate() throws SQLException {
        List<ValidationError> errors = new ArrayList<ValidationError>();
        RESTHelper restHelper = new RESTHelper();

        if (postId == null) {
            errors.add(new ValidationError("postId", "postId is requered"));
        } else if (!(restHelper.getWhere("post", "Post_ID", String.valueOf(postId)).size() > 0)) {
            errors.add(new ValidationError("postId", "this postId not found"));
        }
        if (userId == null) {
            errors.add(new ValidationError("userId", "userId is requered"));

        } else if (!(restHelper.getWhere("user", "User_ID", String.valueOf(userId)).size() > 0)) {
            errors.add(new ValidationError("userId", "this userId not found"));
        } else {
            Map<String, String> map = new HashMap<>();
            map.put("Post_ID", String.valueOf(postId));
            map.put("User_ID", String.valueOf(userId));
            List<Like> like = restHelper.getWhereCondition("rate", new String[]{"AND"}, map);
            if (like.size() > 0) {
                errors.add(new ValidationError("postId", "postId rated before"));
            }
        }


        return errors.isEmpty() ? null : errors;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "Rate_ID", unique = true, nullable = false, precision = 10)
    public Integer getRateId() {
        return this.rateId;
    }

    public void setRateId(Integer rateId) {
        this.rateId = rateId;
    }

    @Column(name = "Post_ID", nullable = false, precision = 10)
    @NotNull
    public Integer getPostId() {
        return this.postId;
    }

    public void setPostId(Integer postId) {
        this.postId = postId;
    }

    @Column(name = "Rating", nullable = false, precision = 12)
    @NotNull
    public Double getRating() {
        return this.rating;
    }

    public void setRating(Double rating) {
        this.rating = rating;
    }

    @Column(name = "User_ID", nullable = false, precision = 10)
    @NotNull
    public Integer getUserId() {
        return this.userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    @Column(name = "Date", nullable = false)
    public Timestamp getDate() {
        return this.date;
    }

    public void setDate(Timestamp date) {
        this.date = date;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Rate (");

        sb.append(rateId);
        sb.append(", ").append(postId);
        sb.append(", ").append(rating);
        sb.append(", ").append(userId);
        sb.append(", ").append(date);

        sb.append(")");
        return sb.toString();
    }
}
