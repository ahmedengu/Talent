/**
 * This class is generated by jOOQ
 */
package models.talentDB.tables.pojos;


import models.RESTHelper;
import play.data.validation.ValidationError;

import javax.annotation.Generated;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.8.0"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Entity
@Table(name = "Comment", schema = "talent")
public class Comment implements Serializable {

    private static final long serialVersionUID = 1484516768;

    private Integer commentId;
    private Integer postId;
    private String text;
    private Integer userId;
    private Timestamp date;

    public Comment() {
    }

    public Comment(Comment value) {
        this.commentId = value.commentId;
        this.postId = value.postId;
        this.text = value.text;
        this.userId = value.userId;
        this.date = value.date;
    }

    public Comment(
            Integer commentId,
            Integer postId,
            String text,
            Integer userId,
            Timestamp date
    ) {
        this.commentId = commentId;
        this.postId = postId;
        this.text = text;
        this.userId = userId;
        this.date = date;
    }

    public List<ValidationError> validate() throws SQLException {
        List<ValidationError> errors = new ArrayList<ValidationError>();
        RESTHelper restHelper = new RESTHelper();

        if (postId == null) {
            errors.add(new ValidationError("postId", "postId is requered"));
        } else if (!(restHelper.getWhere("post", "Post_ID", String.valueOf(postId)).size() > 0)) {
            errors.add(new ValidationError("postId", "this postId not found"));
        }

        return errors.isEmpty() ? null : errors;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "Comment_ID", unique = true, nullable = false, precision = 10)
    public Integer getCommentId() {
        return this.commentId;
    }

    public void setCommentId(Integer commentId) {
        this.commentId = commentId;
    }

    @Column(name = "Post_ID", nullable = false, precision = 10)
    @NotNull
    public Integer getPostId() {
        return this.postId;
    }

    public void setPostId(Integer postId) {
        this.postId = postId;
    }

    @Column(name = "Text", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    public String getText() {
        return this.text;
    }

    public void setText(String text) {
        this.text = text;
    }

    @Column(name = "User_ID", nullable = false, precision = 10)
    @NotNull
    public Integer getUserId() {
        return this.userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    @Column(name = "Date", nullable = false)
    public Timestamp getDate() {
        return this.date;
    }

    public void setDate(Timestamp date) {
        this.date = date;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Comment (");

        sb.append(commentId);
        sb.append(", ").append(postId);
        sb.append(", ").append(text);
        sb.append(", ").append(userId);
        sb.append(", ").append(date);

        sb.append(")");
        return sb.toString();
    }
}
