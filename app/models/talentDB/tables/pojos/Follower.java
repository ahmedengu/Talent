/**
 * This class is generated by jOOQ
 */
package models.talentDB.tables.pojos;


import models.RESTHelper;
import play.data.validation.ValidationError;

import javax.annotation.Generated;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.io.Serializable;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.8.0"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Entity
@Table(name = "Follower", schema = "talent")
public class Follower implements Serializable {

    private static final long serialVersionUID = 2031737187;

    private Integer followerId;
    private Timestamp date;
    private Integer followed;
    private Integer follower;

    public Follower() {
    }

    public Follower(Follower value) {
        this.followerId = value.followerId;
        this.date = value.date;
        this.followed = value.followed;
        this.follower = value.follower;
    }

    public Follower(
            Integer followerId,
            Timestamp date,
            Integer followed,
            Integer follower
    ) {
        this.followerId = followerId;
        this.date = date;
        this.followed = followed;
        this.follower = follower;
    }

    public List<ValidationError> validate() throws SQLException {
        List<ValidationError> errors = new ArrayList<ValidationError>();
        RESTHelper restHelper = new RESTHelper();

        if (followed == null) {
            errors.add(new ValidationError("followed", "followed is requered"));
        } else if (!(restHelper.getWhere("user", "User_ID", String.valueOf(followed)).size() > 0)) {
            errors.add(new ValidationError("followed", "this followed not found"));
        } else if (followed == follower) {
            errors.add(new ValidationError("followed", "the same person"));
        } else {
            Map<String, String> map = new HashMap<>();
            map.put("Followed", String.valueOf(followed));
            map.put("Follower", String.valueOf(follower));
            List<models.talentDB.tables.pojos.Follower> follower = restHelper.getWhereCondition("follower", new String[]{"AND"}, map);
            if (follower.size() > 0) {
                for (int i = 0; i < follower.size(); i++) {
                    restHelper.deleteByID("follower", String.valueOf(follower.get(i).followerId));
                }
                errors.add(new ValidationError("follower", "you followed him before"));

            }
        }

        return errors.isEmpty() ? null : errors;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "Follower_ID", unique = true, nullable = false, precision = 10)
    public Integer getFollowerId() {
        return this.followerId;
    }

    public void setFollowerId(Integer followerId) {
        this.followerId = followerId;
    }

    @Column(name = "Date", nullable = false)
    public Timestamp getDate() {
        return this.date;
    }

    public void setDate(Timestamp date) {
        this.date = date;
    }

    @Column(name = "Followed", nullable = false, precision = 10)
    @NotNull
    public Integer getFollowed() {
        return this.followed;
    }

    public void setFollowed(Integer followed) {
        this.followed = followed;
    }

    @Column(name = "Follower", nullable = false, precision = 10)
    @NotNull
    public Integer getFollower() {
        return this.follower;
    }

    public void setFollower(Integer follower) {
        this.follower = follower;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Follower (");

        sb.append(followerId);
        sb.append(", ").append(date);
        sb.append(", ").append(followed);
        sb.append(", ").append(follower);

        sb.append(")");
        return sb.toString();
    }
}
