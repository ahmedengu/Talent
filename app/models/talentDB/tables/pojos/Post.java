/**
 * This class is generated by jOOQ
 */
package models.talentDB.tables.pojos;


import models.RESTHelper;
import play.data.validation.ValidationError;

import javax.annotation.Generated;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.8.0"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Entity
@Table(name = "Post", schema = "talent")
public class Post implements Serializable {

    private static final long serialVersionUID = 912209847;

    private Integer postId;
    private Integer userId;
    private Integer categoryId;
    private Double totalRating;
    private Timestamp date;
    private String posturl;
    private Integer ratingcount;
    private String tags;

    public Post() {
    }

    public Post(Post value) {
        this.postId = value.postId;
        this.userId = value.userId;
        this.categoryId = value.categoryId;
        this.totalRating = value.totalRating;
        this.date = value.date;
        this.posturl = value.posturl;
        this.ratingcount = value.ratingcount;
        this.tags = value.tags;
    }

    public Post(
            Integer postId,
            Integer userId,
            Integer categoryId,
            Double totalRating,
            Timestamp date,
            String posturl,
            Integer ratingcount,
            String tags
    ) {
        this.postId = postId;
        this.userId = userId;
        this.categoryId = categoryId;
        this.totalRating = totalRating;
        this.date = date;
        this.posturl = posturl;
        this.ratingcount = ratingcount;
        this.tags = tags;
    }

    public List<ValidationError> validate() throws SQLException {
        List<ValidationError> errors = new ArrayList<ValidationError>();
        RESTHelper restHelper = new RESTHelper();

//        if (userId == null) {
//            errors.add(new ValidationError("username", "username is requered"));
//        } else if (restHelper.getWhere("user", "Username", username).size() > 0) {
//            errors.add(new ValidationError("username", "this username is used before"));
//        }
//
        if (userId == null) {
            errors.add(new ValidationError("userId", "userId is requered"));
        } else if (!(restHelper.getWhere("user", "User_ID", String.valueOf(userId)).size() > 0)) {
            errors.add(new ValidationError("userId", "userId is not found"));
        }

        if (categoryId == null) {
            errors.add(new ValidationError("categoryId", "categoryId is requered"));
        } else if (restHelper.getWhere("category", "Category_ID", String.valueOf(categoryId)).size() == 0) {
            errors.add(new ValidationError("categoryId", "categoryId is not found"));
        }

        return errors.isEmpty() ? null : errors;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "Post_ID", unique = true, nullable = false, precision = 10)
    public Integer getPostId() {
        return this.postId;
    }

    public void setPostId(Integer postId) {
        this.postId = postId;
    }

    @Column(name = "User_ID", nullable = false, precision = 10)
    @NotNull
    public Integer getUserId() {
        return this.userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    @Column(name = "Category_ID", nullable = false, precision = 10)
    @NotNull
    public Integer getCategoryId() {
        return this.categoryId;
    }

    public void setCategoryId(Integer categoryId) {
        this.categoryId = categoryId;
    }

    @Column(name = "Total_Rating", nullable = false, precision = 12)
    public Double getTotalRating() {
        return this.totalRating;
    }

    public void setTotalRating(Double totalRating) {
        this.totalRating = totalRating;
    }

    @Column(name = "Date", nullable = false)
    public Timestamp getDate() {
        return this.date;
    }

    public void setDate(Timestamp date) {
        this.date = date;
    }

    @Column(name = "PostUrl", nullable = false, length = 1000)
    @NotNull
    @Size(max = 1000)
    public String getPosturl() {
        return this.posturl;
    }

    public void setPosturl(String posturl) {
        this.posturl = posturl;
    }

    @Column(name = "RatingCount", nullable = false, precision = 10)
    public Integer getRatingcount() {
        return this.ratingcount;
    }

    public void setRatingcount(Integer ratingcount) {
        this.ratingcount = ratingcount;
    }

    @Column(name = "tags", length = 65535)
    @Size(max = 65535)
    public String getTags() {
        return this.tags;
    }

    public void setTags(String tags) {
        this.tags = tags;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Post (");

        sb.append(postId);
        sb.append(", ").append(userId);
        sb.append(", ").append(categoryId);
        sb.append(", ").append(totalRating);
        sb.append(", ").append(date);
        sb.append(", ").append(posturl);
        sb.append(", ").append(ratingcount);
        sb.append(", ").append(tags);

        sb.append(")");
        return sb.toString();
    }
}
