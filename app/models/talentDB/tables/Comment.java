/**
 * This class is generated by jOOQ
 */
package models.talentDB.tables;


import models.talentDB.Keys;
import models.talentDB.Talent;
import models.talentDB.tables.records.CommentRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.8.0"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Comment extends TableImpl<CommentRecord> {

    /**
     * The reference instance of <code>talent.Comment</code>
     */
    public static final Comment COMMENT = new Comment();
    private static final long serialVersionUID = 47893618;
    /**
     * The column <code>talent.Comment.Comment_ID</code>.
     */
    public final TableField<CommentRecord, Integer> COMMENT_ID = createField("Comment_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>talent.Comment.Post_ID</code>.
     */
    public final TableField<CommentRecord, Integer> POST_ID = createField("Post_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>talent.Comment.Text</code>.
     */
    public final TableField<CommentRecord, String> TEXT = createField("Text", org.jooq.impl.SQLDataType.CHAR.length(255).nullable(false), this, "");
    /**
     * The column <code>talent.Comment.User_ID</code>.
     */
    public final TableField<CommentRecord, Integer> USER_ID = createField("User_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>talent.Comment.Date</code>.
     */
    public final TableField<CommentRecord, Timestamp> DATE = createField("Date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>talent.Comment</code> table reference
     */
    public Comment() {
        this("Comment", null);
    }

    /**
     * Create an aliased <code>talent.Comment</code> table reference
     */
    public Comment(String alias) {
        this(alias, COMMENT);
    }

    private Comment(String alias, Table<CommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Comment(String alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentRecord> getRecordType() {
        return CommentRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Talent.TALENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CommentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CommentRecord> getPrimaryKey() {
        return Keys.KEY_COMMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CommentRecord>> getKeys() {
        return Arrays.<UniqueKey<CommentRecord>>asList(Keys.KEY_COMMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Comment as(String alias) {
        return new Comment(alias, this);
    }

    /**
     * Rename this table
     */
    public Comment rename(String name) {
        return new Comment(name, null);
    }
}
